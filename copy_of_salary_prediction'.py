# -*- coding: utf-8 -*-
"""Copy of Salary Prediction'.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HFGsjX80Gntzc2K8TkqOlol5WTLsolRj
"""

# Import Library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
import joblib

# Memuat Data Menjadi Dataframe
dataku = pd.read_csv('laporan_gaji.csv', encoding='latin1')

# Menampilkan 5 Baris Pertama Dari Dataframe
dataku.head()

dataku.info()

# Identifikasi kolom dengan tipe data object
object_columns = dataku.select_dtypes(include=['object']).columns

# Menampilkan kolom bertipe object
print("Kolom bertipe object:\n", object_columns)

# Menggunakan Label Encoding untuk semua kolom bertipe object
from sklearn.preprocessing import LabelEncoder

# Membuat salinan dataset
dataku_encoded = dataku.copy()

# Melakukan encoding untuk setiap kolom bertipe object
label_encoders = {}
for col in object_columns: #menandakan data kategori
    le = LabelEncoder() #kelas pada encoding label
    dataku_encoded[col] = le.fit_transform(dataku[col].astype(str))
    label_encoders[col] = le  # Simpan LabelEncoder jika ingin membalikkan encoding

# Menampilkan dataset yang sudah di-encode
print(dataku_encoded.head())

# Mencetak nama kolom unik
for kolom in categorical_data:
  print(kolom, dataku[kolom].unique())

for kolom in categorical_data:
  print(kolom, dataku_int[kolom].unique())

#  visualisasi matriks korelasi dari DataFrame
plt.figure(figsize=(10,8))
plt.title('Matriks Kolerasi Data')
sns.heatmap(dataku_int.corr(), annot=True, linewidths=3)
plt.show()

def distribusi():
    fig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12, 8))
    plt.suptitle('Distribusi', fontsize=24)

    # Ambil kolom dari dataku_int
    kolom_list = dataku_int.columns.tolist()

    # Loop untuk mengisi subplot
    for i in range(2):
        for j in range(3):
            index = i * 3 + j
            if index < len(kolom_list):
                k = kolom_list[index]
                dataku_int[k].plot(kind='hist', ax=axes[i, j], bins=10)
                axes[i, j].set_title(k)
            else:
                axes[i, j].axis('off')  # Matikan subplot jika tidak ada kolom

    plt.tight_layout(rect=[0, 0, 1, 0.96])  # Atur layout
    plt.show()

distribusi()

# Memisahkan fitur (X) dan target (y)
X = dataku_int.drop(columns=['Salary'])
y = dataku_int['Salary']

# Normalisasi fitur menggunakan StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Membagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Inisialisasi dan melatih model Random Forest
rf_reg = RandomForest Regressor(random_state=42, n_estimators=100)
rf_reg.fit(X_train, y_train)

# Prediksi menggunakan Random Forest
y_pred_rf = rf_reg.predict(X_test)

# Menghitung metrik evaluasi
r2_rf = r2_score(y_test, y_pred_rf)
mse_rf = mean_squared_error(y_test, y_pred_rf)

# Menampilkan hasil evaluasi
print("\nEvaluasi Model Random Forest:")
print(f"RÂ² Score: {r2_rf:.2f}")
print(f"Mean Squared Error: {mse_rf:.2f}")

# Menyimpan model terbaik
joblib.dump(rf_reg, 'predict_salary_model.pkl')
print("\nModel Random Forest telah disimpan sebagai 'best_salary_model.pkl'.")